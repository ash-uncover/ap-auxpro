package org.ap.auxpro.internal;

import org.ap.common.validators.v2.IValidator;
import org.ap.common.validators.v2.ValidatorProvider;
import org.ap.common.validators.v2.ValidatorTypes;
import java.time.LocalDate;

/* This class was auto-generated by the JavaWriter */
public class Validators {

	public static class PASSWORD extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MIN_LENGTH_EXCEEDED = "MIN_LENGTH_EXCEEDED";
			public static final String CONTAIN_FORBIDDEN_CHARS = "CONTAIN_FORBIDDEN_CHARS";
			public static final String MUST_CONTAIN_LOWERCASE = "MUST_CONTAIN_LOWERCASE";
			public static final String MUST_CONTAIN_UPPERCASE = "MUST_CONTAIN_UPPERCASE";
			public static final String MUST_CONTAIN_SPECIAL = "MUST_CONTAIN_SPECIAL";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMinLength(8)
				.matchesNot("\\W", ERRORS.CONTAIN_FORBIDDEN_CHARS)
				.matches("[a-z]", ERRORS.MUST_CONTAIN_LOWERCASE)
				.matches("[A-Z]", ERRORS.MUST_CONTAIN_UPPERCASE)
				.matches("[0-9_]", ERRORS.MUST_CONTAIN_SPECIAL);
		}
	}

	public static class NON_NULL extends ValidatorProvider {
		public static class ERRORS {
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.ANY()
				.isRequired();
		}
	}

	public static class NON_EMPTY_STRING extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MIN_LENGTH_EXCEEDED = "MIN_LENGTH_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMinLength(1);
		}
	}

	public static class NON_EMPTY_ARRAY extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_AN_ARRAY = "MUST_BE_AN_ARRAY";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MIN_LENGTH_EXCEEDED = "MIN_LENGTH_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.ARRAY()
				.isRequired()
				.hasMinLength(1);
		}
	}

	public static class BOOLEAN extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_BOOLEAN = "MUST_BE_A_BOOLEAN";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.BOOLEAN();
		}
	}

	public static class PHONE extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MAX_LENGTH_EXCEEDED = "MAX_LENGTH_EXCEEDED";
			public static final String INVALID_PHONE = "INVALID_PHONE";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMaxLength(10)
				.matches("^0[1-9]([0-9]){8}$", ERRORS.INVALID_PHONE);
		}
	}

	public static class SOCIAL_NUMBER extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MAX_LENGTH_EXCEEDED = "MAX_LENGTH_EXCEEDED";
			public static final String INVALID_SOCIAL_NUMBER = "INVALID_SOCIAL_NUMBER";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMaxLength(7)
				.matches("^[1-2][0-9]{6}$", ERRORS.INVALID_SOCIAL_NUMBER);
		}
	}

	public static class POSTAL_CODE extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MAX_LENGTH_EXCEEDED = "MAX_LENGTH_EXCEEDED";
			public static final String INVALID_POSTAL_CODE = "INVALID_POSTAL_CODE";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMaxLength(5)
				.matches("^[0-9]{5}$", ERRORS.INVALID_POSTAL_CODE);
		}
	}

	public static class POSITIVE_INTEGER extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_NUMBER = "MUST_BE_A_NUMBER";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MIN_VALUE_EXCEEDED = "MIN_VALUE_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.NUMBER()
				.isRequired()
				.hasMinValue(1);
		}
	}

	public static class ID_CARD_NUMBER extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MAX_LENGTH_EXCEEDED = "MAX_LENGTH_EXCEEDED";
			public static final String INVALID_IDCARD_NUMBER = "INVALID_IDCARD_NUMBER";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMaxLength(12)
				.matches("^[0-9]{12}$", ERRORS.INVALID_IDCARD_NUMBER);
		}
	}

	public static class SIRET_NUMBER extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MAX_LENGTH_EXCEEDED = "MAX_LENGTH_EXCEEDED";
			public static final String INVALID_SIRET_NUMBER = "INVALID_SIRET_NUMBER";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMaxLength(14)
				.matches("^[0-9]{14}$", ERRORS.INVALID_SIRET_NUMBER);
		}
	}

	public static class TWEET extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_STRING = "MUST_BE_A_STRING";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MIN_LENGTH_EXCEEDED = "MIN_LENGTH_EXCEEDED";
			public static final String MAX_LENGTH_EXCEEDED = "MAX_LENGTH_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.STRING()
				.isRequired()
				.hasMinLength(1)
				.hasMaxLength(140);
		}
	}

	public static class BEFORE_TODAY extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_DATE = "MUST_BE_A_DATE";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MAX_DATE_EXCEEDED = "MAX_DATE_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.DATE()
				.isRequired()
				.hasMaxDate(LocalDate.now());
		}
	}

	public static class BEFORE_TODAY_OR_TODAY extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_DATE = "MUST_BE_A_DATE";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MAX_DATE_EXCEEDED = "MAX_DATE_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.DATE()
				.isRequired()
				.hasMaxDate(LocalDate.now())
				.isMaxInclusive(true);
		}
	}

	public static class AFTER_TODAY extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_DATE = "MUST_BE_A_DATE";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MIN_DATE_EXCEEDED = "MIN_DATE_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.DATE()
				.isRequired()
				.hasMinDate(LocalDate.now());
		}
	}

	public static class AFTER_TODAY_OR_TODAY extends ValidatorProvider {
		public static class ERRORS {
			public static final String MUST_BE_A_DATE = "MUST_BE_A_DATE";
			public static final String CANNOT_BE_NULL = "CANNOT_BE_NULL";
			public static final String MIN_DATE_EXCEEDED = "MIN_DATE_EXCEEDED";
		}
		public IValidator VALIDATOR() {
			 return ValidatorTypes.DATE()
				.isRequired()
				.hasMinDate(LocalDate.now())
				.isMinInclusive(true);
		}
	}

}
