package org.ap.auxpro.rest.filter;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.PreMatching;
import org.ap.common.web.security.APSecurityContext;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.Context;
import org.ap.common.util.Encoder;
import org.ap.common.exception.APWebException;
import javax.ws.rs.core.Response.Status;
import org.ap.auxpro.storage.apauth.ApauthCollection;
import org.ap.auxpro.storage.apauth.ApauthData;
import java.util.List;

/* This class was auto-generated by the JavaWriter */
@PreMatching
public class AuthorizationRequestFilter implements ContainerRequestFilter {

	public static final String HEADER = "Authorization";
	@Context
	private UriInfo _info;

	public AuthorizationRequestFilter() {
	}

	@Override
	public void filter(ContainerRequestContext requestContext) throws WebApplicationException {
		if (requestContext.getMethod().equals("OPTIONS")) return;
		if (_info.getPath().equals("swagger.json")) return;
		String header = requestContext.getHeaderString(HEADER);
		if (header == null) {
			throw new WebApplicationException(Status.UNAUTHORIZED);
		} else {
			try {
				String[] credentials = Encoder.decodeBasicAuth(header);
				if (credentials == null || credentials.length != 2) {
					throw new WebApplicationException(Status.UNAUTHORIZED);
				}
				ApauthData dataAuth = ApauthCollection.getByUsername(credentials[0]);
				if (dataAuth == null) {
					dataAuth = ApauthCollection.getByEmail(credentials[0]);
				}
				if (dataAuth == null || !credentials[1].equals(dataAuth.getPassword()) || dataAuth.getRegistered() == null || !dataAuth.getRegistered()) {
					throw new WebApplicationException(Status.UNAUTHORIZED);
				}
				
				List<String> dataRoles = dataAuth.getRoles();
				dataRoles.add(dataAuth.getEntityId());
				String[] roles = dataRoles.toArray(new String[dataRoles.size()]);
				requestContext.setSecurityContext(new APSecurityContext(dataAuth.getUsername(), roles));
			} catch (APWebException e) {
				throw new WebApplicationException(Status.UNAUTHORIZED);
			}
		}
	}

}
