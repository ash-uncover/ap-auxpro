package org.ap.auxpro.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.common.web.servlet.APServletBase;
import io.swagger.annotations.Api;
import org.ap.auxpro.bean.ServiceGetBean;
import io.swagger.annotations.ApiOperation;
import org.ap.auxpro.storage.service.ServiceData;
import org.ap.auxpro.storage.service.ServiceCollection;
import org.ap.common.web.exception.APWebException;
import org.bson.conversions.Bson;
import static com.mongodb.client.model.Filters.*;
import org.ap.auxpro.storage.service.ServiceFields;
import org.ap.common.web.auth.APSecured;
import java.util.List;
import java.util.ArrayList;
import org.ap.auxpro.bean.ServicePostBean;
import org.ap.auxpro.storage.apauth.ApauthCollection;
import org.ap.auxpro.storage.apauth.ApauthData;
import com.mongodb.MongoWriteException;
import org.ap.auxpro.internal.MailSender;
import org.ap.auxpro.internal.ETokenType;
import org.ap.common.time.TimeHelper;
import org.ap.common.util.UUIDGenerator;
import org.ap.auxpro.bean.ServicePutBean;
import org.ap.auxpro.helpers.ServiceHelper;
import java.util.Date;
import org.ap.auxpro.bean.PromotionCodePostBean;
import org.ap.auxpro.bean.AuxiliaryGetBean;
import org.ap.auxpro.storage.auxiliary.AuxiliaryData;
import org.ap.auxpro.storage.auxiliary.AuxiliaryCollection;
import org.ap.auxpro.storage.auxiliary.AuxiliaryFields;
import org.ap.auxpro.bean.CustomerBean;
import org.ap.auxpro.storage.customer.CustomerData;
import org.ap.auxpro.storage.customer.CustomerCollection;
import org.ap.auxpro.storage.customer.CustomerFields;
import org.ap.auxpro.bean.InterventionBean;
import org.ap.auxpro.storage.intervention.InterventionData;
import org.ap.auxpro.storage.intervention.InterventionCollection;
import org.ap.auxpro.storage.intervention.InterventionFields;
import org.ap.auxpro.bean.OfferBean;
import org.ap.auxpro.storage.offer.OfferData;
import org.ap.auxpro.storage.offer.OfferCollection;
import org.ap.auxpro.storage.offer.OfferFields;
import org.ap.auxpro.bean.MissionBean;
import org.ap.auxpro.storage.mission.MissionData;
import org.ap.auxpro.storage.mission.MissionCollection;
import org.ap.auxpro.storage.mission.MissionFields;

/* This class was auto-generated by the JavaWriter */
@Path("/services")
@Api(value="services")
public class ServiceServlet extends APServletBase {

	public static final String PATH = "/services";

	@GET
	@APSecured
	@Produces({MediaType.APPLICATION_JSON})
	@ApiOperation(value="Find all services",response=ServiceGetBean.class)
	public Response getServices(@Context SecurityContext sc, @Context UriInfo info) {
		try {
			List<Bson> conditions = loadQueryFilter(info.getQueryParameters(), ServiceFields.class);
			
			List<ServiceData> datas = null;
			if (conditions.size() > 0) {
				datas = ServiceCollection.get(and(conditions));
			} else {
				datas = ServiceCollection.getAll();
			}
			
			List<ServiceGetBean> beanList = new ArrayList<ServiceGetBean>();
			for (ServiceData data : datas) {
				ApauthData dataAuth = ApauthCollection.getById(data.getAuthId());
				if (dataAuth == null) {
					return Response.status(Status.NOT_FOUND).build();
				}
				ServiceGetBean bean = new ServiceGetBean(data, dataAuth);
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	public Response postService(@Context SecurityContext sc, ServicePostBean servicePostBean) {
		try {
			ApauthData dataAuth = ApauthCollection.getByUsername(servicePostBean.username);
			ServiceData dataEntity;
			if (dataAuth != null) {
				if (dataAuth.getRegistered()) {
					throw APWebException.AP_AUTH_REG_001;
				} else {
					ServiceCollection.deleteByAuthId(dataAuth.id);
					ApauthCollection.delete(dataAuth);
				}
			}
			dataAuth = ApauthCollection.getByEmail(servicePostBean.email);
			if (dataAuth != null) {
				if (dataAuth.getRegistered()) {
					throw APWebException.AP_AUTH_REG_002;
				} else {
					ServiceCollection.deleteByAuthId(dataAuth.id);
					ApauthCollection.delete(dataAuth);
				}
			}
			
			List<String> roles = new ArrayList<String>();
			roles.add("service");
			roles.add("apauth");
			
			dataAuth = new ApauthData();
			dataAuth.setId(UUIDGenerator.nextId());
			dataAuth.setEntityId(UUIDGenerator.nextId());
			dataAuth.setUsername(servicePostBean.username);
			dataAuth.setPassword(servicePostBean.password);
			dataAuth.setEmail(servicePostBean.email);
			dataAuth.setType("service");
			dataAuth.setRoles(roles);
			dataAuth.setRegistered(Boolean.FALSE);
			dataAuth.setActive(Boolean.TRUE);
			dataAuth.setToken(UUIDGenerator.nextCode());
			dataAuth.setTokenType(ETokenType.REGISTER.name());
			dataAuth.setTokenDateTime(TimeHelper.nowDateTimeIntegers());
			ApauthCollection.create(dataAuth);
			
			dataEntity = new ServiceData();
			dataEntity.setId(dataAuth.getEntityId());
			dataEntity.setAuthId(dataAuth.getId());
			dataEntity.setCreationDate(new Date());
			dataEntity.setLastUpdateDate(new Date());
			ServiceCollection.create(dataEntity);
			
			MailSender.getInstance().sendRegistrationMail(dataAuth);
			
			return Response.status(Status.CREATED).build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}")
	@APSecured
	@Produces({MediaType.APPLICATION_JSON})
	@ApiOperation(value="Find services by id",response=ServiceGetBean.class)
	public Response getService(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			ServiceData data = ServiceCollection.getById(id);
			if (data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			ApauthData dataAuth = ApauthCollection.getById(data.getAuthId());
			if (dataAuth == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			ServiceGetBean bean = new ServiceGetBean(data, dataAuth);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}")
	@APSecured
	@Consumes({MediaType.APPLICATION_JSON})
	public Response putService(@Context SecurityContext sc, @PathParam("id") final String id, ServicePutBean servicePutBean) {
		try {
			ServiceHelper.beforePutService(sc, id, servicePutBean);
			// Get actual data object
			ServiceData data = ServiceCollection.getById(id);
			// Check data exists
			if (data == null) {
				throw new APWebException("service not found", "AP_SERVICE_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setLastUpdateDate(new Date());
			servicePutBean.fillData(data);
			// Store the updated data object
			ServiceCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Path("/{id}/code")
	@APSecured
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response postServiceCode(@Context SecurityContext sc, @PathParam("id") final String id, PromotionCodePostBean promotionCodePostBean) {
		try {
			Object bean = ServiceHelper.postPromotionCode(sc, id, promotionCodePostBean);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{serviceId}/auxiliarys")
	@APSecured
	@Produces({MediaType.APPLICATION_JSON})
	@ApiOperation(value="Find all auxiliarys associated to a services",response=AuxiliaryGetBean.class)
	public Response getServiceAuxiliarys(@Context SecurityContext sc, @PathParam("serviceId") final String serviceId, @Context UriInfo info) {
		try {
			List<Bson> conditions = loadQueryFilter(info.getQueryParameters(), AuxiliaryFields.class);
			
			conditions.add(eq("serviceId", serviceId));
			List<AuxiliaryData> datas = null;
			if (conditions.size() > 0) {
				datas = AuxiliaryCollection.get(and(conditions));
			} else {
				datas = AuxiliaryCollection.getAll();
			}
			
			List<AuxiliaryGetBean> beanList = new ArrayList<AuxiliaryGetBean>();
			for (AuxiliaryData data : datas) {
				ApauthData dataAuth = ApauthCollection.getById(data.getAuthId());
				if (dataAuth == null) {
					return Response.status(Status.NOT_FOUND).build();
				}
				AuxiliaryGetBean bean = new AuxiliaryGetBean(data, dataAuth);
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{serviceId}/customers")
	@APSecured
	@Produces({MediaType.APPLICATION_JSON})
	@ApiOperation(value="Find all customers associated to a services",response=CustomerBean.class)
	public Response getServiceCustomers(@Context SecurityContext sc, @PathParam("serviceId") final String serviceId, @Context UriInfo info) {
		try {
			List<Bson> conditions = loadQueryFilter(info.getQueryParameters(), CustomerFields.class);
			
			conditions.add(eq("serviceId", serviceId));
			List<CustomerData> datas = null;
			if (conditions.size() > 0) {
				datas = CustomerCollection.get(and(conditions));
			} else {
				datas = CustomerCollection.getAll();
			}
			
			List<CustomerBean> beanList = new ArrayList<CustomerBean>();
			for (CustomerData data : datas) {
				CustomerBean bean = new CustomerBean(data);
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{serviceId}/interventions")
	@APSecured
	@Produces({MediaType.APPLICATION_JSON})
	@ApiOperation(value="Find all interventions associated to a services",response=InterventionBean.class)
	public Response getServiceInterventions(@Context SecurityContext sc, @PathParam("serviceId") final String serviceId, @Context UriInfo info) {
		try {
			List<Bson> conditions = loadQueryFilter(info.getQueryParameters(), InterventionFields.class);
			
			conditions.add(eq("serviceId", serviceId));
			List<InterventionData> datas = null;
			if (conditions.size() > 0) {
				datas = InterventionCollection.get(and(conditions));
			} else {
				datas = InterventionCollection.getAll();
			}
			
			List<InterventionBean> beanList = new ArrayList<InterventionBean>();
			for (InterventionData data : datas) {
				InterventionBean bean = new InterventionBean(data);
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{serviceId}/offers")
	@APSecured
	@Produces({MediaType.APPLICATION_JSON})
	@ApiOperation(value="Find all offers associated to a services",response=OfferBean.class)
	public Response getServiceOffers(@Context SecurityContext sc, @PathParam("serviceId") final String serviceId, @Context UriInfo info) {
		try {
			List<Bson> conditions = loadQueryFilter(info.getQueryParameters(), OfferFields.class);
			
			conditions.add(eq("serviceId", serviceId));
			List<OfferData> datas = null;
			if (conditions.size() > 0) {
				datas = OfferCollection.get(and(conditions));
			} else {
				datas = OfferCollection.getAll();
			}
			
			List<OfferBean> beanList = new ArrayList<OfferBean>();
			for (OfferData data : datas) {
				OfferBean bean = new OfferBean(data);
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{serviceId}/missions")
	@APSecured
	@Produces({MediaType.APPLICATION_JSON})
	@ApiOperation(value="Find all missions associated to a services",response=MissionBean.class)
	public Response getServiceMissions(@Context SecurityContext sc, @PathParam("serviceId") final String serviceId, @Context UriInfo info) {
		try {
			List<Bson> conditions = loadQueryFilter(info.getQueryParameters(), MissionFields.class);
			
			conditions.add(eq("serviceId", serviceId));
			List<MissionData> datas = null;
			if (conditions.size() > 0) {
				datas = MissionCollection.get(and(conditions));
			} else {
				datas = MissionCollection.getAll();
			}
			
			List<MissionBean> beanList = new ArrayList<MissionBean>();
			for (MissionData data : datas) {
				MissionBean bean = new MissionBean(data);
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
