package org.ap.auxpro.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.web.rest.servlet.APServletBase;
import org.ap.auxpro.bean.GeozoneBean;
import org.ap.auxpro.storage.GeozoneData;
import org.ap.auxpro.storage.GeozoneCollection;
import org.ap.web.internal.APWebException;
import org.ap.web.internal.UUIDGenerator;
import com.mongodb.MongoWriteException;
import org.ap.common.TimeHelper;

/* This class was auto-generated by the JavaWriter */
@Path("/geozones")
public class GeozoneServlet extends APServletBase {

	public static final String PATH = "/geozones";

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	public Response postGeozone(@Context SecurityContext sc, GeozoneBean geozoneBean) {
		try {
			GeozoneData data = new GeozoneData();
			data.setId(UUIDGenerator.nextId());
			data.setCreationDate(TimeHelper.nowDateTimeIntegers());
			data.setLastUpdateDate(TimeHelper.nowDateTimeIntegers());
			data.setAuxiliaryId(geozoneBean.auxiliaryId);
			data.setAddress(geozoneBean.address);
			data.setLattitude(geozoneBean.lattitude);
			data.setCity(geozoneBean.city);
			data.setPostalCode(geozoneBean.postalCode);
			data.setType(geozoneBean.type);
			data.setRadius(geozoneBean.radius);
			data.setLongitude(geozoneBean.longitude);
			GeozoneCollection.create(data);
			return Response.status(Status.CREATED).entity("{\"id\": \"" + data.id + "\"}").build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getGeozone(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			GeozoneData data = GeozoneCollection.getById(id);
			if(data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			GeozoneBean bean = new GeozoneBean();
			bean.auxiliaryId = data.getAuxiliaryId();
			bean.address = data.getAddress();
			bean.lattitude = data.getLattitude();
			bean.city = data.getCity();
			bean.lastUpdateDate = data.getLastUpdateDate();
			bean.postalCode = data.getPostalCode();
			bean.id = data.getId();
			bean.type = data.getType();
			bean.radius = data.getRadius();
			bean.creationDate = data.getCreationDate();
			bean.longitude = data.getLongitude();
			
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	public Response putGeozone(@Context SecurityContext sc, @PathParam("id") final String id, GeozoneBean geozoneBean) {
		try {
			// Get actual data object
			GeozoneData data = GeozoneCollection.getById(id);
			// Check data exists
			if (data == null) {
				throw new APWebException("geozone not found", "AP_GEOZONE_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setLastUpdateDate(TimeHelper.nowDateTimeIntegers());
			data.setAuxiliaryId(geozoneBean.auxiliaryId);
			data.setAddress(geozoneBean.address);
			data.setLattitude(geozoneBean.lattitude);
			data.setCity(geozoneBean.city);
			data.setPostalCode(geozoneBean.postalCode);
			data.setType(geozoneBean.type);
			data.setRadius(geozoneBean.radius);
			data.setLongitude(geozoneBean.longitude);
			// Store the updated data object
			GeozoneCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{id}")
	public Response deleteGeozone(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			// Try to delete the entity
			if (!GeozoneCollection.deleteById(id)) {
				throw new APWebException("geozone not found", "AP_GEOZONE_NOTFOUND", Status.BAD_REQUEST);
			}
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
