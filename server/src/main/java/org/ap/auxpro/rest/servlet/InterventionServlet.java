package org.ap.auxpro.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.common.web.servlet.APServletBase;
import org.ap.auxpro.bean.InterventionPostBean;
import org.ap.common.exception.APWebException;
import javax.annotation.security.RolesAllowed;
import org.ap.auxpro.helpers.InterventionHelper;
import org.ap.auxpro.bean.InterventionBean;
import org.ap.auxpro.storage.intervention.InterventionData;
import org.ap.auxpro.storage.intervention.InterventionCollection;
import org.ap.auxpro.bean.InterventionPutBean;
import java.util.Date;
import org.ap.auxpro.bean.InterventionEmptyBean;

/* This class was auto-generated by the JavaWriter */
@Path("/interventions")
public class InterventionServlet extends APServletBase {

	public static final String PATH = "/interventions";

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("service")
	public Response postIntervention(@Context SecurityContext sc, InterventionPostBean interventionPostBean) {
		try {
			Object bean = InterventionHelper.createIntervention(sc, interventionPostBean);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}")
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("apauth")
	public Response getIntervention(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			InterventionData data = InterventionCollection.getById(id);
			if (data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			InterventionBean bean = new InterventionBean(data);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	@RolesAllowed("service")
	public Response putIntervention(@Context SecurityContext sc, @PathParam("id") final String id, InterventionPutBean interventionPutBean) {
		try {
			// Get actual data object
			InterventionData data = InterventionCollection.getById(id);
			// Check data exists
			if (data == null) {
				throw new APWebException("intervention not found", "AP_INTERVENTION_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setLastUpdateDate(new Date());
			interventionPutBean.fillData(data);
			// Store the updated data object
			InterventionCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}/match")
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("service")
	public Response getInterventionMatchs(@Context SecurityContext sc, @PathParam("id") final String id, @Context UriInfo info) {
		try {
			Object bean = InterventionHelper.getInterventionMatch(sc, id);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}/cancel")
	@Consumes({MediaType.APPLICATION_JSON})
	@RolesAllowed("service")
	public Response putInterventionCancels(@Context SecurityContext sc, @PathParam("id") final String id, InterventionEmptyBean interventionEmptyBean) {
		try {
			Object bean = InterventionHelper.putInterventionCancel(sc, id, interventionEmptyBean);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
