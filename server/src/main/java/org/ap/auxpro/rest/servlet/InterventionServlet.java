package org.ap.auxpro.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.web.rest.servlet.APServletBase;
import org.ap.auxpro.bean.InterventionBean;
import org.ap.auxpro.storage.InterventionData;
import org.ap.auxpro.storage.InterventionCollection;
import org.ap.web.internal.APWebException;
import org.ap.web.internal.UUIDGenerator;
import com.mongodb.MongoWriteException;
import org.ap.common.TimeHelper;
import java.util.List;
import java.util.ArrayList;
import org.ap.auxpro.helpers.InterventionHelper;
import org.ap.auxpro.bean.OfferBean;
import org.ap.auxpro.storage.OfferData;
import org.ap.auxpro.storage.OfferCollection;
import static com.mongodb.client.model.Filters.*;
import org.ap.auxpro.bean.MissionBean;
import org.ap.auxpro.storage.MissionData;
import org.ap.auxpro.storage.MissionCollection;

/* This class was auto-generated by the JavaWriter */
@Path("/interventions")
public class InterventionServlet extends APServletBase {

	public static final String PATH = "/interventions";

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	public Response postIntervention(@Context SecurityContext sc, InterventionBean interventionBean) {
		try {
			InterventionData data = new InterventionData();
			data.setId(UUIDGenerator.nextId());
			data.setCreationDate(TimeHelper.nowDateTimeIntegers());
			data.setLastUpdateDate(TimeHelper.nowDateTimeIntegers());
			data.setPeriod(interventionBean.period);
			data.setAuxiliaryId(interventionBean.auxiliaryId);
			data.setEndDate(interventionBean.endDate);
			data.setSadStatusChanged(interventionBean.sadStatusChanged);
			data.setCustomerId(interventionBean.customerId);
			data.setSadStatus(interventionBean.sadStatus);
			data.setDays(interventionBean.days);
			data.setStartTime(interventionBean.startTime);
			data.setEndTime(interventionBean.endTime);
			data.setServiceId(interventionBean.serviceId);
			data.setHideToSad(interventionBean.hideToSad);
			data.setStartDate(interventionBean.startDate);
			InterventionCollection.create(data);
			return Response.status(Status.CREATED).entity("{\"id\": \"" + data.id + "\"}").build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getIntervention(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			InterventionData data = InterventionCollection.getById(id);
			if(data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			InterventionBean bean = new InterventionBean();
			bean.period = data.getPeriod();
			bean.auxiliaryId = data.getAuxiliaryId();
			bean.endDate = data.getEndDate();
			bean.lastUpdateDate = data.getLastUpdateDate();
			bean.sadStatusChanged = data.getSadStatusChanged();
			bean.creationDate = data.getCreationDate();
			bean.customerId = data.getCustomerId();
			bean.sadStatus = data.getSadStatus();
			bean.days = data.getDays();
			bean.startTime = data.getStartTime();
			bean.endTime = data.getEndTime();
			bean.id = data.getId();
			bean.serviceId = data.getServiceId();
			bean.hideToSad = data.getHideToSad();
			bean.startDate = data.getStartDate();
			
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}/match")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getInterventionMatchs(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			Object bean = InterventionHelper.getInterventionMatch(sc, id);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	public Response putIntervention(@Context SecurityContext sc, @PathParam("id") final String id, InterventionBean interventionBean) {
		try {
			Object bean = InterventionHelper.putIntervention(sc, id, interventionBean);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{id}")
	public Response deleteIntervention(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			// Try to delete the entity
			if (!InterventionCollection.deleteById(id)) {
				throw new APWebException("intervention not found", "AP_INTERVENTION_NOTFOUND", Status.BAD_REQUEST);
			}
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{interventionId}/offers")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getInterventionOffers(@Context SecurityContext sc, @PathParam("interventionId") final String interventionId) {
		try {
			List<OfferData> datas = OfferCollection.get(and(eq("interventionId", interventionId)));
			
			List<OfferBean> beanList = new ArrayList<OfferBean>();
			for (OfferData data : datas) {
				OfferBean bean = new OfferBean();
				bean.auxStatus = data.getAuxStatus();
				bean.auxStatusChanged = data.getAuxStatusChanged();
				bean.auxiliaryId = data.getAuxiliaryId();
				bean.hideToAux = data.getHideToAux();
				bean.lastUpdateDate = data.getLastUpdateDate();
				bean.sadStatusChanged = data.getSadStatusChanged();
				bean.creationDate = data.getCreationDate();
				bean.customerId = data.getCustomerId();
				bean.sadStatus = data.getSadStatus();
				bean.id = data.getId();
				bean.serviceId = data.getServiceId();
				bean.interventionId = data.getInterventionId();
				bean.hideToSad = data.getHideToSad();
				
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList.toArray(new OfferBean[beanList.size()])).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{interventionId}/missions")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getInterventionMissions(@Context SecurityContext sc, @PathParam("interventionId") final String interventionId) {
		try {
			List<MissionData> datas = MissionCollection.get(and(eq("interventionId", interventionId)));
			
			List<MissionBean> beanList = new ArrayList<MissionBean>();
			for (MissionData data : datas) {
				MissionBean bean = new MissionBean();
				bean.date = data.getDate();
				bean.auxStatus = data.getAuxStatus();
				bean.auxStatusChanged = data.getAuxStatusChanged();
				bean.auxiliaryId = data.getAuxiliaryId();
				bean.hideToAux = data.getHideToAux();
				bean.lastUpdateDate = data.getLastUpdateDate();
				bean.sadStatusChanged = data.getSadStatusChanged();
				bean.creationDate = data.getCreationDate();
				bean.customerId = data.getCustomerId();
				bean.sadStatus = data.getSadStatus();
				bean.id = data.getId();
				bean.serviceId = data.getServiceId();
				bean.interventionId = data.getInterventionId();
				bean.hideToSad = data.getHideToSad();
				
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList.toArray(new MissionBean[beanList.size()])).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
