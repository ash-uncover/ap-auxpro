package org.ap.auxpro.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.auxpro.storage.apauth.ApauthData;
import org.ap.auxpro.storage.apauth.ApauthCollection;
import org.ap.common.web.servlet.APServletBase;
import org.ap.auxpro.bean.APAuthInfoBean;
import org.ap.common.web.auth.APSecured;
import org.ap.auxpro.bean.APAuthPasswordBean;
import org.ap.common.util.UUIDGenerator;
import org.ap.common.time.TimeHelper;
import org.ap.auxpro.internal.MailSender;
import org.ap.common.web.exception.APWebException;
import org.ap.auxpro.bean.APAuthTokenUsernameBean;
import org.ap.auxpro.internal.ETokenType;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Date;
import org.ap.auxpro.bean.APAuthUsernameBean;
import org.ap.auxpro.bean.APAuthRecoverBean;
import org.ap.auxpro.bean.APAuthTokenBean;
import org.ap.auxpro.bean.APAuthChangemailBean;

/* This class was auto-generated by the JavaWriter */
@Path("/auth")
public class AuthServlet extends APServletBase {

	public static final String PATH = "/auth";

	@GET
	@Produces({MediaType.APPLICATION_JSON})
	@APSecured
	public Response getAuth(@Context SecurityContext sc) {
		try {
			// Get user from the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(sc.getUserPrincipal().getName());
			// build response
			APAuthInfoBean result = new APAuthInfoBean();
			result.username = dataAuth.getUsername();
			result.entityId = dataAuth.getEntityId();
			result.type = dataAuth.getType();
			result.email = dataAuth.getEmail();
			// send response
			return Response.status(Status.OK).entity(result).build();
			
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/password")
	@APSecured
	public Response putPassword(@Context SecurityContext sc, APAuthPasswordBean bean) {
		try {
			// Get user from the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(sc.getUserPrincipal().getName());
			// check previous password
			if (!dataAuth.password.equals(bean.oldPassword)) {
				return Response.status(Status.UNAUTHORIZED).build();
			}
			// updates DB
			dataAuth.setPassword(bean.password);
			ApauthCollection.update(dataAuth);
			// send response
			return Response.status(Status.OK).build();
			
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/register")
	public Response postRegisterToken(@Context SecurityContext sc, APAuthTokenUsernameBean bean) {
		try {
			// Check that the user exists in the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(bean.username);
			if (dataAuth == null) {
				dataAuth = ApauthCollection.getByEmail(bean.username);
				if (dataAuth == null) {
					throw APWebException.AP_AUTH_USERCHECK_001;
				}
			}
			// Check that a token was sent
			if (bean.token == null) {
				throw APWebException.AP_AUTH_TOKENCHECK_001;
			}
			// Check that the token matches the DB content
			if (!bean.token.equals(dataAuth.getToken())) {
				throw APWebException.AP_AUTH_TOKENCHECK_002;
			}
			// Check that the token is of type 'REGISTER'
			if (!ETokenType.REGISTER.equals(ETokenType.byId(dataAuth.getTokenType()))) {
				throw APWebException.AP_AUTH_TOKENCHECK_003;
			}
			// Check that the token is not expired
			Duration d = Duration.between(TimeHelper.toLocalDateTime(dataAuth.getTokenDateTime()), LocalDateTime.now()).abs();
			if (d.compareTo(Duration.ofHours(1)) > 0) {
				throw APWebException.AP_AUTH_TOKENCHECK_004;
			}
			// updates DB
			dataAuth.setActive(true);
			dataAuth.setRegistered(true);
			dataAuth.setRegistrationDate(new Date());
			dataAuth.setToken(null);
			dataAuth.setTokenType(null);
			dataAuth.setTokenDateTime(null);
			dataAuth.setTokenData(null);
			ApauthCollection.updateNull(dataAuth);
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/recover")
	public Response postRecover(@Context SecurityContext sc, APAuthUsernameBean bean) {
		try {
			// Check that the user exists in the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(bean.username);
			if (dataAuth == null) {
				dataAuth = ApauthCollection.getByEmail(bean.username);
				if (dataAuth == null) {
					throw APWebException.AP_AUTH_USERCHECK_001;
				}
			}
			// updates DB
			dataAuth.setToken(UUIDGenerator.nextCode());
			dataAuth.setTokenType(ETokenType.RECOVER.name());
			dataAuth.setTokenDateTime(TimeHelper.nowDateTimeIntegers());
			dataAuth.setTokenData(null);
			ApauthCollection.updateNull(dataAuth);
			// send mail
			MailSender.getInstance().sendPasswordRecoveryMail(dataAuth);
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/recover/check")
	public Response postRecoverCheck(@Context SecurityContext sc, APAuthTokenUsernameBean bean) {
		try {
			// Check that the user exists in the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(bean.username);
			if (dataAuth == null) {
				dataAuth = ApauthCollection.getByEmail(bean.username);
				if (dataAuth == null) {
					throw APWebException.AP_AUTH_USERCHECK_001;
				}
			}
			// Check that a token was sent
			if (bean.token == null) {
				throw APWebException.AP_AUTH_TOKENCHECK_001;
			}
			// Check that the token matches the DB content
			if (!bean.token.equals(dataAuth.getToken())) {
				throw APWebException.AP_AUTH_TOKENCHECK_002;
			}
			// Check that the token is of type 'RECOVER'
			if (!ETokenType.RECOVER.equals(ETokenType.byId(dataAuth.getTokenType()))) {
				throw APWebException.AP_AUTH_TOKENCHECK_003;
			}
			// Check that the token is not expired
			Duration d = Duration.between(TimeHelper.toLocalDateTime(dataAuth.getTokenDateTime()), LocalDateTime.now()).abs();
			if (d.compareTo(Duration.ofHours(1)) > 0) {
				throw APWebException.AP_AUTH_TOKENCHECK_004;
			}
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/recover")
	public Response putRecover(@Context SecurityContext sc, APAuthRecoverBean bean) {
		try {
			// Check that the user exists in the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(bean.username);
			if (dataAuth == null) {
				dataAuth = ApauthCollection.getByEmail(bean.username);
				if (dataAuth == null) {
					throw APWebException.AP_AUTH_USERCHECK_001;
				}
			}
			// Check that a token was sent
			if (bean.token == null) {
				throw APWebException.AP_AUTH_TOKENCHECK_001;
			}
			// Check that the token matches the DB content
			if (!bean.token.equals(dataAuth.getToken())) {
				throw APWebException.AP_AUTH_TOKENCHECK_002;
			}
			// Check that the token is of type 'RECOVER'
			if (!ETokenType.RECOVER.equals(ETokenType.byId(dataAuth.getTokenType()))) {
				throw APWebException.AP_AUTH_TOKENCHECK_003;
			}
			// Check that the token is not expired
			Duration d = Duration.between(TimeHelper.toLocalDateTime(dataAuth.getTokenDateTime()), LocalDateTime.now()).abs();
			if (d.compareTo(Duration.ofHours(1)) > 0) {
				throw APWebException.AP_AUTH_TOKENCHECK_004;
			}
			// Check that a password was sent
			if (bean.password == null) {
				throw APWebException.AP_AUTH_RECOVER_001;
			}
			// updates DB
			dataAuth.setPassword(bean.password);
			dataAuth.setToken(null);
			dataAuth.setTokenType(null);
			dataAuth.setTokenDateTime(null);
			dataAuth.setTokenData(null);
			ApauthCollection.updateNull(dataAuth);
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/changemail")
	@APSecured
	public Response postChangemail(@Context SecurityContext sc) {
		try {
			// Get user from the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(sc.getUserPrincipal().getName());
			// updates DB
			dataAuth.setToken(UUIDGenerator.nextCode());
			dataAuth.setTokenType(ETokenType.CHANGEMAIL.name());
			dataAuth.setTokenDateTime(TimeHelper.nowDateTimeIntegers());
			dataAuth.setTokenData(null);
			ApauthCollection.updateNull(dataAuth);
			// send mail
			MailSender.getInstance().sendChangeUsernameMail(dataAuth);
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/changemail/check")
	@APSecured
	public Response postChangemailCheck(@Context SecurityContext sc, APAuthTokenBean bean) {
		try {
			// Get user from the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(sc.getUserPrincipal().getName());
			// Check that a token was sent
			if (bean.token == null) {
				throw APWebException.AP_AUTH_TOKENCHECK_001;
			}
			// Check that the token matches the DB content
			if (!bean.token.equals(dataAuth.getToken())) {
				throw APWebException.AP_AUTH_TOKENCHECK_002;
			}
			// Check that the token is of type 'CHANGEMAIL'
			if (!ETokenType.CHANGEMAIL.equals(ETokenType.byId(dataAuth.getTokenType()))) {
				throw APWebException.AP_AUTH_TOKENCHECK_003;
			}
			// Check that the token is not expired
			Duration d = Duration.between(TimeHelper.toLocalDateTime(dataAuth.getTokenDateTime()), LocalDateTime.now()).abs();
			if (d.compareTo(Duration.ofHours(1)) > 0) {
				throw APWebException.AP_AUTH_TOKENCHECK_004;
			}
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/changemail")
	@APSecured
	public Response putChangemail(@Context SecurityContext sc, APAuthChangemailBean bean) {
		try {
			// Get user from the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(sc.getUserPrincipal().getName());
			// Check that a token was sent
			if (bean.token == null) {
				throw APWebException.AP_AUTH_TOKENCHECK_001;
			}
			// Check that the token matches the DB content
			if (!bean.token.equals(dataAuth.getToken())) {
				throw APWebException.AP_AUTH_TOKENCHECK_002;
			}
			// Check that the token is of type 'CHANGEMAIL'
			if (!ETokenType.CHANGEMAIL.equals(ETokenType.byId(dataAuth.getTokenType()))) {
				throw APWebException.AP_AUTH_TOKENCHECK_003;
			}
			// Check that the token is not expired
			Duration d = Duration.between(TimeHelper.toLocalDateTime(dataAuth.getTokenDateTime()), LocalDateTime.now()).abs();
			if (d.compareTo(Duration.ofHours(1)) > 0) {
				throw APWebException.AP_AUTH_TOKENCHECK_004;
			}
			// check email is available
			if (ApauthCollection.getByEmail(bean.email) != null) {
				throw APWebException.AP_AUTH_REG_002;
			}
			// update DB
			dataAuth.setToken(UUIDGenerator.nextCode());
			dataAuth.setTokenType(ETokenType.CHANGEMAIL_CONFIRM.name());
			dataAuth.setTokenDateTime(TimeHelper.nowDateTimeIntegers());
			dataAuth.setTokenData(bean.email);
			ApauthCollection.update(dataAuth);
			// send mail
			dataAuth.setEmail(bean.email);
			MailSender.getInstance().sendConfirmUsernameMail(dataAuth);
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	@Path("/changemail/confirm")
	@APSecured
	public Response postChangemailConfirm(@Context SecurityContext sc, APAuthTokenBean bean) {
		try {
			// Get user from the DB
			ApauthData dataAuth = ApauthCollection.getByUsername(sc.getUserPrincipal().getName());
			// Check that a token was sent
			if (bean.token == null) {
				throw APWebException.AP_AUTH_TOKENCHECK_001;
			}
			// Check that the token matches the DB content
			if (!bean.token.equals(dataAuth.getToken())) {
				throw APWebException.AP_AUTH_TOKENCHECK_002;
			}
			// Check that the token is of type 'CHANGEMAIL_CONFIRM'
			if (!ETokenType.CHANGEMAIL_CONFIRM.equals(ETokenType.byId(dataAuth.getTokenType()))) {
				throw APWebException.AP_AUTH_TOKENCHECK_003;
			}
			// Check that the token is not expired
			Duration d = Duration.between(TimeHelper.toLocalDateTime(dataAuth.getTokenDateTime()), LocalDateTime.now()).abs();
			if (d.compareTo(Duration.ofHours(1)) > 0) {
				throw APWebException.AP_AUTH_TOKENCHECK_004;
			}
			// update DB
			dataAuth.setEmail(dataAuth.getTokenData());
			dataAuth.setToken(null);
			dataAuth.setTokenType(null);
			dataAuth.setTokenDateTime(null);
			dataAuth.setTokenData(null);
			ApauthCollection.updateNull(dataAuth);
			// send response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
