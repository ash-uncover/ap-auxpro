package org.ap.auxpro.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.web.rest.servlet.APServletBase;
import org.ap.auxpro.bean.CustomerBean;
import org.ap.auxpro.storage.CustomerData;
import org.ap.auxpro.storage.CustomerCollection;
import org.ap.web.internal.APWebException;
import org.ap.web.internal.UUIDGenerator;
import com.mongodb.MongoWriteException;
import org.ap.auxpro.bean.InterventionBean;
import org.ap.auxpro.storage.InterventionData;
import org.ap.auxpro.storage.InterventionCollection;
import java.util.List;
import java.util.ArrayList;
import static com.mongodb.client.model.Filters.*;

/* This class was auto-generated by the JavaWriter */
@Path("/customers")
public class CustomerServlet extends APServletBase {

	public static final String PATH = "/customers";

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	public Response postCustomer(@Context SecurityContext sc, CustomerBean customerBean) {
		try {
			CustomerData data = new CustomerData();
			data.setId(UUIDGenerator.nextId());
			data.setLastName(customerBean.lastName);
			data.setCountry(customerBean.country);
			data.setCivility(customerBean.civility);
			data.setAddress(customerBean.address);
			data.setSkillNursing(customerBean.skillNursing);
			data.setCity(customerBean.city);
			data.setLattitude(customerBean.lattitude);
			data.setPostalCode(customerBean.postalCode);
			data.setBirthDate(customerBean.birthDate);
			data.setSkillChildhood(customerBean.skillChildhood);
			data.setSkillCompagny(customerBean.skillCompagny);
			data.setSkillShopping(customerBean.skillShopping);
			data.setFirstName(customerBean.firstName);
			data.setNationality(customerBean.nationality);
			data.setPhone(customerBean.phone);
			data.setSkillAdministrative(customerBean.skillAdministrative);
			data.setSkillHousework(customerBean.skillHousework);
			data.setSkillDoityourself(customerBean.skillDoityourself);
			data.setServiceId(customerBean.serviceId);
			data.setEmail(customerBean.email);
			data.setLongitude(customerBean.longitude);
			CustomerCollection.create(data);
			return Response.status(Status.CREATED).entity("{\"id\": \"" + data.id + "\"}").build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getCustomer(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			CustomerData data = CustomerCollection.getById(id);
			if(data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			CustomerBean bean = new CustomerBean();
			bean.lastName = data.getLastName();
			bean.country = data.getCountry();
			bean.civility = data.getCivility();
			bean.address = data.getAddress();
			bean.skillNursing = data.getSkillNursing();
			bean.city = data.getCity();
			bean.lattitude = data.getLattitude();
			bean.postalCode = data.getPostalCode();
			bean.birthDate = data.getBirthDate();
			bean.skillChildhood = data.getSkillChildhood();
			bean.skillCompagny = data.getSkillCompagny();
			bean.skillShopping = data.getSkillShopping();
			bean.firstName = data.getFirstName();
			bean.nationality = data.getNationality();
			bean.phone = data.getPhone();
			bean.skillAdministrative = data.getSkillAdministrative();
			bean.skillHousework = data.getSkillHousework();
			bean.skillDoityourself = data.getSkillDoityourself();
			bean.id = data.getId();
			bean.serviceId = data.getServiceId();
			bean.email = data.getEmail();
			bean.longitude = data.getLongitude();
			
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	public Response putCustomer(@Context SecurityContext sc, @PathParam("id") final String id, CustomerBean customerBean) {
		try {
			// Get actual data object
			CustomerData data = CustomerCollection.getById(id);
			// Check data exists
			if (data == null) {
				throw new APWebException("customer not found", "AP_CUSTOMER_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setLastName(customerBean.lastName);
			data.setCountry(customerBean.country);
			data.setCivility(customerBean.civility);
			data.setAddress(customerBean.address);
			data.setSkillNursing(customerBean.skillNursing);
			data.setCity(customerBean.city);
			data.setLattitude(customerBean.lattitude);
			data.setPostalCode(customerBean.postalCode);
			data.setBirthDate(customerBean.birthDate);
			data.setSkillChildhood(customerBean.skillChildhood);
			data.setSkillCompagny(customerBean.skillCompagny);
			data.setSkillShopping(customerBean.skillShopping);
			data.setFirstName(customerBean.firstName);
			data.setNationality(customerBean.nationality);
			data.setPhone(customerBean.phone);
			data.setSkillAdministrative(customerBean.skillAdministrative);
			data.setSkillHousework(customerBean.skillHousework);
			data.setSkillDoityourself(customerBean.skillDoityourself);
			data.setServiceId(customerBean.serviceId);
			data.setEmail(customerBean.email);
			data.setLongitude(customerBean.longitude);
			// Store the updated data object
			CustomerCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{id}")
	public Response deleteCustomer(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			// Try to delete the entity
			if (!CustomerCollection.deleteById(id)) {
				throw new APWebException("customer not found", "AP_CUSTOMER_NOTFOUND", Status.BAD_REQUEST);
			}
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{customerId}/interventions")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getCustomerInterventions(@Context SecurityContext sc, @PathParam("customerId") final String customerId) {
		try {
			List<InterventionData> datas = InterventionCollection.get(and(eq("customerId", customerId)));
			
			List<InterventionBean> beanList = new ArrayList<InterventionBean>();
			for (InterventionData data : datas) {
				InterventionBean bean = new InterventionBean();
				bean.period = data.getPeriod();
				bean.auxiliaryId = data.getAuxiliaryId();
				bean.endDate = data.getEndDate();
				bean.sadStatusChanged = data.getSadStatusChanged();
				bean.customerId = data.getCustomerId();
				bean.sadStatus = data.getSadStatus();
				bean.days = data.getDays();
				bean.startTime = data.getStartTime();
				bean.endTime = data.getEndTime();
				bean.id = data.getId();
				bean.serviceId = data.getServiceId();
				bean.hideToSad = data.getHideToSad();
				bean.startDate = data.getStartDate();
				
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList.toArray(new InterventionBean[beanList.size()])).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
