package org.ap.auxpro.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.common.web.servlet.APServletBase;
import org.ap.auxpro.bean.CustomerBean;
import org.ap.auxpro.storage.customer.CustomerData;
import org.ap.auxpro.storage.customer.CustomerCollection;
import org.ap.common.exception.APWebException;
import org.ap.common.util.UUIDGenerator;
import java.util.Date;
import com.mongodb.MongoWriteException;
import org.ap.common.time.TimeHelper;
import org.ap.auxpro.bean.InterventionBean;
import org.ap.auxpro.storage.intervention.InterventionData;
import org.ap.auxpro.storage.intervention.InterventionCollection;
import org.bson.conversions.Bson;
import static com.mongodb.client.model.Filters.*;
import org.ap.auxpro.storage.intervention.InterventionFields;
import java.util.List;
import java.util.ArrayList;

/* This class was auto-generated by the JavaWriter */
@Path("/customers")
public class CustomerServlet extends APServletBase {

	public static final String PATH = "/customers";

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response postCustomer(@Context SecurityContext sc, CustomerBean customerBean) {
		try {
			CustomerData data = new CustomerData();
			data.setId(UUIDGenerator.nextId());
			data.setCreationDate(new Date());
			data.setLastUpdateDate(new Date());
			customerBean.fillData(data);
			CustomerCollection.create(data);
			return Response.status(Status.CREATED).entity("{\"id\": \"" + data.id + "\"}").build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getCustomer(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			CustomerData data = CustomerCollection.getById(id);
			if (data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			CustomerBean bean = new CustomerBean(data);
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	public Response putCustomer(@Context SecurityContext sc, @PathParam("id") final String id, CustomerBean customerBean) {
		try {
			// Get actual data object
			CustomerData data = CustomerCollection.getById(id);
			// Check data exists
			if (data == null) {
				throw new APWebException("customer not found", "AP_CUSTOMER_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setLastUpdateDate(new Date());
			data.setServiceId(customerBean.serviceId);
			data.setLastName(customerBean.lastName);
			data.setCountry(customerBean.country);
			data.setCivility(customerBean.civility);
			data.setAddress(customerBean.address);
			data.setSkillNursing(customerBean.skillNursing);
			data.setCity(customerBean.city);
			data.setLattitude(customerBean.lattitude);
			data.setPostalCode(customerBean.postalCode);
			data.setBirthDate(TimeHelper.toDate(customerBean.birthDate));
			data.setSkillChildhood(customerBean.skillChildhood);
			data.setSkillCompagny(customerBean.skillCompagny);
			data.setSkillShopping(customerBean.skillShopping);
			data.setFirstName(customerBean.firstName);
			data.setNationality(customerBean.nationality);
			data.setPhone(customerBean.phone);
			data.setSkillAdministrative(customerBean.skillAdministrative);
			data.setSkillHousework(customerBean.skillHousework);
			data.setSkillDoityourself(customerBean.skillDoityourself);
			data.setEmail(customerBean.email);
			data.setLongitude(customerBean.longitude);
			// Store the updated data object
			CustomerCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{id}")
	public Response deleteCustomer(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			// Try to delete the entity
			if (!CustomerCollection.deleteById(id)) {
				throw new APWebException("customer not found", "AP_CUSTOMER_NOTFOUND", Status.BAD_REQUEST);
			}
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{customerId}/interventions")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getCustomerInterventions(@Context SecurityContext sc, @PathParam("customerId") final String customerId, @Context UriInfo info) {
		try {
			List<Bson> conditions = new ArrayList<Bson>();
			
			for (String key : info.getQueryParameters().keySet()) {
				InterventionFields field = InterventionFields.byId(key);
				if (field != null) {
					List<Bson> subConditions = new ArrayList<Bson>();
					for (String value : info.getQueryParameters().get(key)) {
						if (field.getType().equals("Boolean")) {
							subConditions.add(eq(key, new Boolean(value)));
						} else {
							subConditions.add(eq(key, value));
						}
					}
					conditions.add(or(subConditions));
				}
			}
			
			conditions.add(eq("customerId", customerId));
			List<InterventionData> datas = null;
			if (conditions.size() > 0) {
				datas = InterventionCollection.get(and(conditions));
			} else {
				datas = InterventionCollection.getAll();
			}
			
			List<InterventionBean> beanList = new ArrayList<InterventionBean>();
			for (InterventionData data : datas) {
				InterventionBean bean = new InterventionBean(data);
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList.toArray(new InterventionBean[beanList.size()])).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
