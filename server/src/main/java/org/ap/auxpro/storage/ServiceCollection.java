package org.ap.auxpro.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class ServiceCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("service");
	}

	public static ServiceData getByAuthId(String authId) throws APWebException {
		Document document = getCollection().find(eq("authId", authId)).first();
		return fromDocument(document);
	}

	public static boolean deleteByAuthId(String authId) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("authId", authId));
		return document != null;
	}

	public static ServiceData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<ServiceData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<ServiceData> result = new ArrayList<ServiceData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<ServiceData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<ServiceData> result = new ArrayList<ServiceData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(ServiceData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(ServiceData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(ServiceData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(ServiceData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	@SuppressWarnings("unchecked")
	public static ServiceData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		ServiceData data = new ServiceData();
		data.authId = document.getString("authId");
		data.country = document.getString("country");
		data.address = document.getString("address");
		data.city = document.getString("city");
		data.lattitude = document.getDouble("lattitude");
		data.accountType = document.getString("accountType");
		data.postalCode = document.getInteger("postalCode");
		data.isTutoSkipped = document.getBoolean("isTutoSkipped");
		data.notifyPartners = document.getBoolean("notifyPartners");
		data.avatar = document.getString("avatar");
		data.accountExpiryDate = (List<Integer>)document.get("accountExpiryDate");
		data.siret = document.getString("siret");
		data.notifyAuxpros = document.getBoolean("notifyAuxpros");
		data.phone = document.getString("phone");
		data.phoneChecked = document.getBoolean("phoneChecked");
		data.function = document.getString("function");
		data.profilCompleted = document.getBoolean("profilCompleted");
		data.addressChecked = document.getBoolean("addressChecked");
		data.emailChecked = document.getBoolean("emailChecked");
		data.id = document.getString("id");
		data.socialReason = document.getString("socialReason");
		data.email = document.getString("email");
		data.longitude = document.getDouble("longitude");
		return data;
	}

	public static Document toDocument(ServiceData service) {
		Document document = new Document();
		if (service.authId != null)
			document.append("authId", service.authId);
		if (service.country != null)
			document.append("country", service.country);
		if (service.address != null)
			document.append("address", service.address);
		if (service.city != null)
			document.append("city", service.city);
		if (service.lattitude != null)
			document.append("lattitude", service.lattitude);
		if (service.accountType != null)
			document.append("accountType", service.accountType);
		if (service.postalCode != null)
			document.append("postalCode", service.postalCode);
		if (service.isTutoSkipped != null)
			document.append("isTutoSkipped", service.isTutoSkipped);
		if (service.notifyPartners != null)
			document.append("notifyPartners", service.notifyPartners);
		if (service.avatar != null)
			document.append("avatar", service.avatar);
		if (service.accountExpiryDate != null)
			document.append("accountExpiryDate", service.accountExpiryDate);
		if (service.siret != null)
			document.append("siret", service.siret);
		if (service.notifyAuxpros != null)
			document.append("notifyAuxpros", service.notifyAuxpros);
		if (service.phone != null)
			document.append("phone", service.phone);
		if (service.phoneChecked != null)
			document.append("phoneChecked", service.phoneChecked);
		if (service.function != null)
			document.append("function", service.function);
		if (service.profilCompleted != null)
			document.append("profilCompleted", service.profilCompleted);
		if (service.addressChecked != null)
			document.append("addressChecked", service.addressChecked);
		if (service.emailChecked != null)
			document.append("emailChecked", service.emailChecked);
		if (service.id != null)
			document.append("id", service.id);
		if (service.socialReason != null)
			document.append("socialReason", service.socialReason);
		if (service.email != null)
			document.append("email", service.email);
		if (service.longitude != null)
			document.append("longitude", service.longitude);
		return document;
	}

	public static Document toNullDocument(ServiceData service) {
		Document document = new Document();
		document.append("authId", service.authId);
		document.append("country", service.country);
		document.append("address", service.address);
		document.append("city", service.city);
		document.append("lattitude", service.lattitude);
		document.append("accountType", service.accountType);
		document.append("postalCode", service.postalCode);
		document.append("isTutoSkipped", service.isTutoSkipped);
		document.append("notifyPartners", service.notifyPartners);
		document.append("avatar", service.avatar);
		document.append("accountExpiryDate", service.accountExpiryDate);
		document.append("siret", service.siret);
		document.append("notifyAuxpros", service.notifyAuxpros);
		document.append("phone", service.phone);
		document.append("phoneChecked", service.phoneChecked);
		document.append("function", service.function);
		document.append("profilCompleted", service.profilCompleted);
		document.append("addressChecked", service.addressChecked);
		document.append("emailChecked", service.emailChecked);
		document.append("id", service.id);
		document.append("socialReason", service.socialReason);
		document.append("email", service.email);
		document.append("longitude", service.longitude);
		return document;
	}

}
