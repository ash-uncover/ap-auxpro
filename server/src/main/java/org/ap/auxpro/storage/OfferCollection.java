package org.ap.auxpro.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class OfferCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("offer");
	}

	public static OfferData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<OfferData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<OfferData> result = new ArrayList<OfferData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<OfferData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<OfferData> result = new ArrayList<OfferData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(OfferData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(OfferData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(OfferData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(OfferData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	@SuppressWarnings("unchecked")
	public static OfferData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		OfferData data = new OfferData();
		data.auxStatus = document.getString("auxStatus");
		data.auxStatusChanged = (List<Integer>)document.get("auxStatusChanged");
		data.auxiliaryId = document.getString("auxiliaryId");
		data.hideToAux = document.getBoolean("hideToAux");
		data.lastUpdateDate = (List<Integer>)document.get("lastUpdateDate");
		data.sadStatusChanged = (List<Integer>)document.get("sadStatusChanged");
		data.creationDate = (List<Integer>)document.get("creationDate");
		data.customerId = document.getString("customerId");
		data.sadStatus = document.getString("sadStatus");
		data.id = document.getString("id");
		data.serviceId = document.getString("serviceId");
		data.interventionId = document.getString("interventionId");
		data.hideToSad = document.getBoolean("hideToSad");
		return data;
	}

	public static Document toDocument(OfferData offer) {
		Document document = new Document();
		if (offer.auxStatus != null)
			document.append("auxStatus", offer.auxStatus);
		if (offer.auxStatusChanged != null)
			document.append("auxStatusChanged", offer.auxStatusChanged);
		if (offer.auxiliaryId != null)
			document.append("auxiliaryId", offer.auxiliaryId);
		if (offer.hideToAux != null)
			document.append("hideToAux", offer.hideToAux);
		if (offer.lastUpdateDate != null)
			document.append("lastUpdateDate", offer.lastUpdateDate);
		if (offer.sadStatusChanged != null)
			document.append("sadStatusChanged", offer.sadStatusChanged);
		if (offer.creationDate != null)
			document.append("creationDate", offer.creationDate);
		if (offer.customerId != null)
			document.append("customerId", offer.customerId);
		if (offer.sadStatus != null)
			document.append("sadStatus", offer.sadStatus);
		if (offer.id != null)
			document.append("id", offer.id);
		if (offer.serviceId != null)
			document.append("serviceId", offer.serviceId);
		if (offer.interventionId != null)
			document.append("interventionId", offer.interventionId);
		if (offer.hideToSad != null)
			document.append("hideToSad", offer.hideToSad);
		return document;
	}

	public static Document toNullDocument(OfferData offer) {
		Document document = new Document();
		document.append("auxStatus", offer.auxStatus);
		document.append("auxStatusChanged", offer.auxStatusChanged);
		document.append("auxiliaryId", offer.auxiliaryId);
		document.append("hideToAux", offer.hideToAux);
		document.append("lastUpdateDate", offer.lastUpdateDate);
		document.append("sadStatusChanged", offer.sadStatusChanged);
		document.append("creationDate", offer.creationDate);
		document.append("customerId", offer.customerId);
		document.append("sadStatus", offer.sadStatus);
		document.append("id", offer.id);
		document.append("serviceId", offer.serviceId);
		document.append("interventionId", offer.interventionId);
		document.append("hideToSad", offer.hideToSad);
		return document;
	}

}
