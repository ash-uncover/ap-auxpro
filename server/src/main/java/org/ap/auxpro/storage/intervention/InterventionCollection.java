package org.ap.auxpro.storage.intervention;

import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.common.mongo.Mongo;
import org.ap.common.exception.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class InterventionCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("intervention");
	}

	public static InterventionData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<InterventionData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<InterventionData> result = new ArrayList<InterventionData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<InterventionData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<InterventionData> result = new ArrayList<InterventionData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(InterventionData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(InterventionData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(InterventionData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(InterventionData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	@SuppressWarnings("unchecked")
	public static InterventionData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		InterventionData data = new InterventionData();
		data.period = document.getString("period");
		data.auxiliaryId = document.getString("auxiliaryId");
		data.endDate = document.getDate("endDate");
		data.lastUpdateDate = document.getDate("lastUpdateDate");
		data.sadStatusChanged = document.getDate("sadStatusChanged");
		data.creationDate = document.getDate("creationDate");
		data.missionType = document.getString("missionType");
		data.customerId = document.getString("customerId");
		data.days = (List<String>)document.get("days");
		data.diplomas = (List<String>)document.get("diplomas");
		data.sadStatus = document.getString("sadStatus");
		data.startTime = (List<Integer>)document.get("startTime");
		data.id = document.getString("id");
		data.endTime = (List<Integer>)document.get("endTime");
		data.serviceId = document.getString("serviceId");
		data.hideToSad = document.getBoolean("hideToSad");
		data.startDate = document.getDate("startDate");
		return data;
	}

	public static Document toDocument(InterventionData intervention) {
		Document document = new Document();
		if (intervention.period != null)
			document.append("period", intervention.period);
		if (intervention.auxiliaryId != null)
			document.append("auxiliaryId", intervention.auxiliaryId);
		if (intervention.endDate != null)
			document.append("endDate", intervention.endDate);
		if (intervention.lastUpdateDate != null)
			document.append("lastUpdateDate", intervention.lastUpdateDate);
		if (intervention.sadStatusChanged != null)
			document.append("sadStatusChanged", intervention.sadStatusChanged);
		if (intervention.creationDate != null)
			document.append("creationDate", intervention.creationDate);
		if (intervention.missionType != null)
			document.append("missionType", intervention.missionType);
		if (intervention.customerId != null)
			document.append("customerId", intervention.customerId);
		if (intervention.days != null)
			document.append("days", intervention.days);
		if (intervention.diplomas != null)
			document.append("diplomas", intervention.diplomas);
		if (intervention.sadStatus != null)
			document.append("sadStatus", intervention.sadStatus);
		if (intervention.startTime != null)
			document.append("startTime", intervention.startTime);
		if (intervention.id != null)
			document.append("id", intervention.id);
		if (intervention.endTime != null)
			document.append("endTime", intervention.endTime);
		if (intervention.serviceId != null)
			document.append("serviceId", intervention.serviceId);
		if (intervention.hideToSad != null)
			document.append("hideToSad", intervention.hideToSad);
		if (intervention.startDate != null)
			document.append("startDate", intervention.startDate);
		return document;
	}

	public static Document toNullDocument(InterventionData intervention) {
		Document document = new Document();
		document.append("period", intervention.period);
		document.append("auxiliaryId", intervention.auxiliaryId);
		document.append("endDate", intervention.endDate);
		document.append("lastUpdateDate", intervention.lastUpdateDate);
		document.append("sadStatusChanged", intervention.sadStatusChanged);
		document.append("creationDate", intervention.creationDate);
		document.append("missionType", intervention.missionType);
		document.append("customerId", intervention.customerId);
		document.append("days", intervention.days);
		document.append("diplomas", intervention.diplomas);
		document.append("sadStatus", intervention.sadStatus);
		document.append("startTime", intervention.startTime);
		document.append("id", intervention.id);
		document.append("endTime", intervention.endTime);
		document.append("serviceId", intervention.serviceId);
		document.append("hideToSad", intervention.hideToSad);
		document.append("startDate", intervention.startDate);
		return document;
	}

}
