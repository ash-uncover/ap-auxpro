package org.ap.auxpro.storage.geozone;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class GeozoneCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("geozone");
	}

	public static GeozoneData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<GeozoneData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<GeozoneData> result = new ArrayList<GeozoneData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<GeozoneData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<GeozoneData> result = new ArrayList<GeozoneData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(GeozoneData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(GeozoneData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(GeozoneData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(GeozoneData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	public static GeozoneData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		GeozoneData data = new GeozoneData();
		data.auxiliaryId = document.getString("auxiliaryId");
		data.address = document.getString("address");
		data.lattitude = document.getDouble("lattitude");
		data.city = document.getString("city");
		data.lastUpdateDate = document.getDate("lastUpdateDate");
		data.postalCode = document.getString("postalCode");
		data.id = document.getString("id");
		data.type = document.getString("type");
		data.radius = document.getInteger("radius");
		data.creationDate = document.getDate("creationDate");
		data.longitude = document.getDouble("longitude");
		return data;
	}

	public static Document toDocument(GeozoneData geozone) {
		Document document = new Document();
		if (geozone.auxiliaryId != null)
			document.append("auxiliaryId", geozone.auxiliaryId);
		if (geozone.address != null)
			document.append("address", geozone.address);
		if (geozone.lattitude != null)
			document.append("lattitude", geozone.lattitude);
		if (geozone.city != null)
			document.append("city", geozone.city);
		if (geozone.lastUpdateDate != null)
			document.append("lastUpdateDate", geozone.lastUpdateDate);
		if (geozone.postalCode != null)
			document.append("postalCode", geozone.postalCode);
		if (geozone.id != null)
			document.append("id", geozone.id);
		if (geozone.type != null)
			document.append("type", geozone.type);
		if (geozone.radius != null)
			document.append("radius", geozone.radius);
		if (geozone.creationDate != null)
			document.append("creationDate", geozone.creationDate);
		if (geozone.longitude != null)
			document.append("longitude", geozone.longitude);
		return document;
	}

	public static Document toNullDocument(GeozoneData geozone) {
		Document document = new Document();
		document.append("auxiliaryId", geozone.auxiliaryId);
		document.append("address", geozone.address);
		document.append("lattitude", geozone.lattitude);
		document.append("city", geozone.city);
		document.append("lastUpdateDate", geozone.lastUpdateDate);
		document.append("postalCode", geozone.postalCode);
		document.append("id", geozone.id);
		document.append("type", geozone.type);
		document.append("radius", geozone.radius);
		document.append("creationDate", geozone.creationDate);
		document.append("longitude", geozone.longitude);
		return document;
	}

}
