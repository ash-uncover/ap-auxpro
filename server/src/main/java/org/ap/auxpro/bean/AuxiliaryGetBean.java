package org.ap.auxpro.bean;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.List;
import org.ap.auxpro.storage.auxiliary.AuxiliaryData;
import org.ap.common.time.TimeHelper;
import org.ap.auxpro.storage.apauth.ApauthData;
import org.ap.common.web.exception.APWebException;
import org.ap.common.validators.ValidationState;
import org.ap.common.validators.EValidatorState;
import org.ap.common.web.exception.APWebError;
import java.util.ArrayList;
import javax.ws.rs.core.Response.Status;
import org.ap.auxpro.storage.auxiliary.AuxiliaryFields;

/* This class was auto-generated by the JavaWriter */
@JsonIgnoreProperties(ignoreUnknown=true)
public class AuxiliaryGetBean {

	public String country;
	public String lastName;
	public String civility;
	public String city;
	public Integer skillChildrenGame;
	public Integer skillHouse;
	public List<Integer> lastUpdateDate;
	public String postalCode;
	public Boolean isTutoSkipped;
	public String description;
	public String socialNumber;
	public List<Integer> accountExpiryDate;
	public Integer profilProgression;
	public Integer skillBeauty;
	public Boolean notifyOffersSms;
	public Boolean notifyAuxpros;
	public Integer skillHandicap;
	public Integer skillIllness;
	public String birthCountry;
	public Integer skillChildrenSchool;
	public Boolean profilCompleted;
	public List<String> diploma;
	public String id;
	public Integer skillChildrenKeep;
	public String email;
	public Integer skillOldCare;
	public Double longitude;
	public String address;
	public Integer skillNursing;
	public Integer skillChildrenCare;
	public Double lattitude;
	public String accountType;
	public Integer skillFood;
	public Boolean notifyPartners;
	public String birthCity;
	public String avatar;
	public Integer skillCompany;
	public List<Integer> creationDate;
	public List<Integer> birthDate;
	public String firstName;
	public String nationality;
	public String isEntrepreneur;
	public String phone;
	public Integer skillTransport;
	public Integer skillClothes;
	public Boolean notifyOffersMail;
	public Integer skillPet;

	public AuxiliaryGetBean() {
	}

	public AuxiliaryGetBean(AuxiliaryData data, ApauthData dataAuth) {
		country = data.getCountry();
		lastName = data.getLastName();
		civility = data.getCivility();
		city = data.getCity();
		skillChildrenGame = data.getSkillChildrenGame();
		skillHouse = data.getSkillHouse();
		lastUpdateDate = TimeHelper.toIntegers(data.getLastUpdateDate());
		postalCode = data.getPostalCode();
		isTutoSkipped = data.getIsTutoSkipped();
		description = data.getDescription();
		socialNumber = data.getSocialNumber();
		accountExpiryDate = TimeHelper.toIntegers(data.getAccountExpiryDate());
		profilProgression = data.getProfilProgression();
		skillBeauty = data.getSkillBeauty();
		notifyOffersSms = data.getNotifyOffersSms();
		notifyAuxpros = data.getNotifyAuxpros();
		skillHandicap = data.getSkillHandicap();
		skillIllness = data.getSkillIllness();
		birthCountry = data.getBirthCountry();
		skillChildrenSchool = data.getSkillChildrenSchool();
		profilCompleted = data.getProfilCompleted();
		diploma = data.getDiploma();
		id = data.getId();
		skillChildrenKeep = data.getSkillChildrenKeep();
		email = dataAuth.getEmail();
		skillOldCare = data.getSkillOldCare();
		longitude = data.getLongitude();
		address = data.getAddress();
		skillNursing = data.getSkillNursing();
		skillChildrenCare = data.getSkillChildrenCare();
		lattitude = data.getLattitude();
		accountType = data.getAccountType();
		skillFood = data.getSkillFood();
		notifyPartners = data.getNotifyPartners();
		birthCity = data.getBirthCity();
		avatar = data.getAvatar();
		skillCompany = data.getSkillCompany();
		creationDate = TimeHelper.toIntegers(data.getCreationDate());
		birthDate = TimeHelper.toIntegers(data.getBirthDate());
		firstName = data.getFirstName();
		nationality = data.getNationality();
		isEntrepreneur = data.getIsEntrepreneur();
		phone = data.getPhone();
		skillTransport = data.getSkillTransport();
		skillClothes = data.getSkillClothes();
		notifyOffersMail = data.getNotifyOffersMail();
		skillPet = data.getSkillPet();
	}

	public AuxiliaryData toData() {
		AuxiliaryData data = new AuxiliaryData();
		fillData(data);
		return data;
	}

	public void fillData(AuxiliaryData data) {
		data.setCountry(country);
		data.setLastName(lastName);
		data.setCivility(civility);
		data.setCity(city);
		data.setSkillChildrenGame(skillChildrenGame);
		data.setSkillHouse(skillHouse);
		data.setPostalCode(postalCode);
		data.setIsTutoSkipped(isTutoSkipped);
		data.setDescription(description);
		data.setSocialNumber(socialNumber);
		data.setAccountExpiryDate(TimeHelper.toDate(accountExpiryDate));
		data.setProfilProgression(profilProgression);
		data.setSkillBeauty(skillBeauty);
		data.setNotifyOffersSms(notifyOffersSms);
		data.setNotifyAuxpros(notifyAuxpros);
		data.setSkillHandicap(skillHandicap);
		data.setSkillIllness(skillIllness);
		data.setBirthCountry(birthCountry);
		data.setSkillChildrenSchool(skillChildrenSchool);
		data.setProfilCompleted(profilCompleted);
		data.setDiploma(diploma);
		data.setSkillChildrenKeep(skillChildrenKeep);
		data.setSkillOldCare(skillOldCare);
		data.setLongitude(longitude);
		data.setAddress(address);
		data.setSkillNursing(skillNursing);
		data.setSkillChildrenCare(skillChildrenCare);
		data.setLattitude(lattitude);
		data.setAccountType(accountType);
		data.setSkillFood(skillFood);
		data.setNotifyPartners(notifyPartners);
		data.setBirthCity(birthCity);
		data.setAvatar(avatar);
		data.setSkillCompany(skillCompany);
		data.setBirthDate(TimeHelper.toDate(birthDate));
		data.setFirstName(firstName);
		data.setNationality(nationality);
		data.setIsEntrepreneur(isEntrepreneur);
		data.setPhone(phone);
		data.setSkillTransport(skillTransport);
		data.setSkillClothes(skillClothes);
		data.setNotifyOffersMail(notifyOffersMail);
		data.setSkillPet(skillPet);
	}

	public void check() throws APWebException {
		List<APWebError> errors = new ArrayList<APWebError>();
		ValidationState countryState = AuxiliaryFields.COUNTRY.getValidator().check(country);
		if (!countryState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'country'"));
		}
		ValidationState lastNameState = AuxiliaryFields.LAST_NAME.getValidator().check(lastName);
		if (!lastNameState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'lastName'"));
		}
		ValidationState civilityState = AuxiliaryFields.CIVILITY.getValidator().check(civility);
		if (!civilityState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'civility'"));
		}
		ValidationState cityState = AuxiliaryFields.CITY.getValidator().check(city);
		if (!cityState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'city'"));
		}
		ValidationState postalCodeState = AuxiliaryFields.POSTAL_CODE.getValidator().check(postalCode);
		if (!postalCodeState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'postalCode'"));
		}
		ValidationState descriptionState = AuxiliaryFields.DESCRIPTION.getValidator().check(description);
		if (!descriptionState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'description'"));
		}
		ValidationState socialNumberState = AuxiliaryFields.SOCIAL_NUMBER.getValidator().check(socialNumber);
		if (!socialNumberState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'socialNumber'"));
		}
		ValidationState birthCountryState = AuxiliaryFields.BIRTH_COUNTRY.getValidator().check(birthCountry);
		if (!birthCountryState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'birthCountry'"));
		}
		ValidationState diplomaState = AuxiliaryFields.DIPLOMA.getValidator().check(diploma);
		if (!diplomaState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'diploma'"));
		}
		ValidationState addressState = AuxiliaryFields.ADDRESS.getValidator().check(address);
		if (!addressState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'address'"));
		}
		ValidationState birthCityState = AuxiliaryFields.BIRTH_CITY.getValidator().check(birthCity);
		if (!birthCityState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'birthCity'"));
		}
		ValidationState birthDateState = AuxiliaryFields.BIRTH_DATE.getValidator().check(birthDate);
		if (!birthDateState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'birthDate'"));
		}
		ValidationState firstNameState = AuxiliaryFields.FIRST_NAME.getValidator().check(firstName);
		if (!firstNameState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'firstName'"));
		}
		ValidationState nationalityState = AuxiliaryFields.NATIONALITY.getValidator().check(nationality);
		if (!nationalityState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'nationality'"));
		}
		ValidationState isEntrepreneurState = AuxiliaryFields.IS_ENTREPRENEUR.getValidator().check(isEntrepreneur);
		if (!isEntrepreneurState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'isEntrepreneur'"));
		}
		ValidationState phoneState = AuxiliaryFields.PHONE.getValidator().check(phone);
		if (!phoneState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_AUXILIARY_INVALID_FIELDS", "Invalid field 'phone'"));
		}
		if (errors.size() > 0) {
			throw new APWebException("AP_AUXILIARY_INVALID_FIELDS", "Invalid fields within 'auxiliary'", errors, Status.BAD_REQUEST);
		}
	}

}
