package org.ap.auxpro.bean;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.List;
import org.ap.auxpro.storage.customer.CustomerData;
import org.ap.common.time.TimeHelper;
import org.ap.common.validators.EValidatorState;
import org.ap.common.validators.ValidationState;
import org.ap.common.exception.APWebException;
import org.ap.common.exception.APWebError;
import java.util.ArrayList;
import javax.ws.rs.core.Response.Status;
import org.ap.auxpro.storage.customer.CustomerFields;

/* This class was auto-generated by the JavaWriter */
@JsonIgnoreProperties(ignoreUnknown=true)
public class CustomerBean {

	public String serviceId;
	public String lastName;
	public String country;
	public String civility;
	public String address;
	public Integer skillNursing;
	public String city;
	public Double lattitude;
	public List<Integer> lastUpdateDate;
	public String postalCode;
	public List<Integer> creationDate;
	public List<Integer> birthDate;
	public Integer skillChildhood;
	public Integer skillCompagny;
	public Integer skillShopping;
	public String firstName;
	public String nationality;
	public String phone;
	public Integer skillAdministrative;
	public Integer skillHousework;
	public Integer skillDoityourself;
	public String id;
	public String email;
	public Double longitude;

	public CustomerBean() {
	}

	public CustomerBean(CustomerData data) {
		serviceId = data.getServiceId();
		lastName = data.getLastName();
		country = data.getCountry();
		civility = data.getCivility();
		address = data.getAddress();
		skillNursing = data.getSkillNursing();
		city = data.getCity();
		lattitude = data.getLattitude();
		lastUpdateDate = TimeHelper.toIntegers(data.getLastUpdateDate());
		postalCode = data.getPostalCode();
		creationDate = TimeHelper.toIntegers(data.getCreationDate());
		birthDate = TimeHelper.toIntegers(data.getBirthDate());
		skillChildhood = data.getSkillChildhood();
		skillCompagny = data.getSkillCompagny();
		skillShopping = data.getSkillShopping();
		firstName = data.getFirstName();
		nationality = data.getNationality();
		phone = data.getPhone();
		skillAdministrative = data.getSkillAdministrative();
		skillHousework = data.getSkillHousework();
		skillDoityourself = data.getSkillDoityourself();
		id = data.getId();
		email = data.getEmail();
		longitude = data.getLongitude();
	}

	public CustomerData toData() {
		CustomerData data = new CustomerData();
		fillData(data);
		return data;
	}

	public void fillData(CustomerData data) {
		data.setServiceId(serviceId);
		data.setLastName(lastName);
		data.setCountry(country);
		data.setCivility(civility);
		data.setAddress(address);
		data.setSkillNursing(skillNursing);
		data.setCity(city);
		data.setLattitude(lattitude);
		data.setPostalCode(postalCode);
		data.setBirthDate(TimeHelper.toDate(birthDate));
		data.setSkillChildhood(skillChildhood);
		data.setSkillCompagny(skillCompagny);
		data.setSkillShopping(skillShopping);
		data.setFirstName(firstName);
		data.setNationality(nationality);
		data.setPhone(phone);
		data.setSkillAdministrative(skillAdministrative);
		data.setSkillHousework(skillHousework);
		data.setSkillDoityourself(skillDoityourself);
		data.setEmail(email);
		data.setLongitude(longitude);
	}

	public void check() throws APWebException {
		List<APWebError> errors = new ArrayList<APWebError>();
		ValidationState lastNameState = CustomerFields.LAST_NAME.getValidator().VALIDATOR().check(lastName);
		if (!lastNameState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'lastName'"));
		}
		ValidationState countryState = CustomerFields.COUNTRY.getValidator().VALIDATOR().check(country);
		if (!countryState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'country'"));
		}
		ValidationState civilityState = CustomerFields.CIVILITY.getValidator().VALIDATOR().check(civility);
		if (!civilityState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'civility'"));
		}
		ValidationState addressState = CustomerFields.ADDRESS.getValidator().VALIDATOR().check(address);
		if (!addressState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'address'"));
		}
		ValidationState cityState = CustomerFields.CITY.getValidator().VALIDATOR().check(city);
		if (!cityState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'city'"));
		}
		ValidationState postalCodeState = CustomerFields.POSTAL_CODE.getValidator().VALIDATOR().check(postalCode);
		if (!postalCodeState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'postalCode'"));
		}
		ValidationState birthDateState = CustomerFields.BIRTH_DATE.getValidator().VALIDATOR().check(birthDate);
		if (!birthDateState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'birthDate'"));
		}
		ValidationState firstNameState = CustomerFields.FIRST_NAME.getValidator().VALIDATOR().check(firstName);
		if (!firstNameState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'firstName'"));
		}
		ValidationState nationalityState = CustomerFields.NATIONALITY.getValidator().VALIDATOR().check(nationality);
		if (!nationalityState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'nationality'"));
		}
		ValidationState phoneState = CustomerFields.PHONE.getValidator().VALIDATOR().check(phone);
		if (!phoneState.getState().equals(EValidatorState.SUCCESS)) {
			errors.add(new APWebError("AP_CUSTOMER_INVALID_FIELDS", "Invalid field 'phone'"));
		}
		if (errors.size() > 0) {
			throw new APWebException("AP_CUSTOMER_INVALID_FIELDS", "Invalid fields within 'customer'", errors, Status.BAD_REQUEST);
		}
	}

}
