import AppHelper from 'helpers/AppHelper'
import AuthHelper from 'helpers/AuthHelper'
import AuxiliaryHelper from 'helpers/AuxiliaryHelper'
import CustomerHelper from 'helpers/CustomerHelper'
import ServiceHelper from 'helpers/ServiceHelper'
import InterventionHelper from 'helpers/InterventionHelper'
import OfferHelper from 'helpers/OfferHelper'
import GeozoneHelper from 'helpers/GeozoneHelper'

import InterventionUtils from 'utils-lib/entities/InterventionUtils'
import CustomerUtils from 'utils-lib/entities/CustomerUtils'

import { BaseData, Utils } from 'ap-react-bootstrap'


let ICONS = {
	HOME: '/assets/images/markers/gmap-marker-home.png',
	GEOZONE: '/assets/images/markers/gmap-marker-geozone.png',
	OFFER: '/assets/images/markers/gmap-marker-customer-pink.png',
	INTERVENTION: '/assets/images/markers/gmap-marker-customer-blue.png',
	SERVICE: '/assets/images/markers/gmap-marker-service-green.png',
	SERVICE_ANY: '/assets/images/markers/gmap-marker-service-red.png'
}

let INFO_TYPE = {
	HOME: 'H',
	GEOZONE: 'G',
	CUSTOMER: 'C',
	OFFER: 'O',
	SERVICE: 'S'
}

/* This class was auto-generated by the JavaScriptWriter */	
class AuxiliaryZoneData extends BaseData {

	register(obj) {
		super.register(obj)
		
		this.onMarkerClicked = this._onMarkerClicked.bind(this)

		this.auxiliary = AuxiliaryHelper.getData(AuthHelper.getEntityId())

		this.obj.state = {
			auxliary: this.auxiliary,
			centerLattitude: Number(this.auxiliary.lattitude),
			centerLongitude: Number(this.auxiliary.longitude)
		}

		let interventiontest = InterventionHelper.getData()
		let offertest = OfferHelper.getData()
		let servicetest = ServiceHelper.getData()
		//let zonetest = GeozoneHelper.getData()
		this.homeMarkers = [ this.buildHomeMarker() ]
		this.serviceMarkers = this.resolveServices().map(this.buildServiceMarker.bind(this))
		this.serviceWithInter = this.resolveServiceWithIntervention().map(this.buildServiceWithInterventionMarker.bind(this))

		this.customersState = this.__buildCustomersState()
		this.interventionCustomers = this.resolveInterventions().map(this.buildInterventionCustomers.bind(this))
		this.offerCustomers = this.resolveOffers().map(this.buildOfferCustomers.bind(this))

		this.obj.state.markers = this.homeMarkers.concat(this.serviceMarkers).concat(this.serviceWithInter).concat(this.interventionCustomers).concat(this.offerCustomers)
	}

	unregister() {
	}

	_onMarkerClicked(marker) {
		let service = null
		let customer = null
		switch(marker.type) {
		case INFO_TYPE.HOME:
			break
		case INFO_TYPE.SERVICE:
			service = ServiceHelper.getData(marker.id)
			break
		case INFO_TYPE.OFFER:
		case INFO_TYPE.CUSTOMER:
			customer = CustomerHelper.getData(marker.id)
			break
		}
		this.setState({ 
			infoType: marker.type,
			service: service,
			customer: customer
		})
	}

	buildHomeMarker() { 
		return {
			lattitude: Number(this.auxiliary.lattitude),
			longitude: Number(this.auxiliary.longitude),
			title: 'Mon domicile',
			type: INFO_TYPE.HOME,
			icon: ICONS.HOME,
			onClick: this.onMarkerClicked.bind(this)
		}
	}

	buildServiceMarker(service) {
		return {
			id: service.id,
			type: INFO_TYPE.SERVICE,
			lattitude: service.lattitude,
			longitude: service.longitude,
			title: service.socialReason,
			icon: ICONS.SERVICE_ANY,
			onClick: this.onMarkerClicked.bind(this)
		}
	}

	buildServiceWithInterventionMarker(service) {
		return {
			id: service.id,
			type: INFO_TYPE.SERVICE,
			lattitude: service.lattitude,
			longitude: service.longitude,
			title: service.socialReason,
			icon: ICONS.SERVICE,
			onClick: this.onMarkerClicked.bind(this)
		}
	}

	buildInterventionCustomers(customer) {
		return {
			id: customer.id,
			type: INFO_TYPE.CUSTOMER,
			lattitude: customer.lattitude,
			longitude: customer.longitude,
			title: CustomerUtils.getFullName(customer),
			icon: ICONS.INTERVENTION,
			onClick: this.onMarkerClicked.bind(this)
		}
	}

	buildOfferCustomers(customer) {
		return {
			id: customer.id,
			type: INFO_TYPE.OFFER,
			lattitude: customer.lattitude,
			longitude: customer.longitude,
			title: CustomerUtils.getFullName(customer),
			icon: ICONS.OFFER,
			onClick: this.onMarkerClicked.bind(this)
		}
	}

	resolveServices() {
		let exclude = this.resolveServiceIdWithIntervention()
		return Utils.reduce(ServiceHelper.getData(), function (services, service) {
			if (exclude.indexOf(service.id) === -1) {
				services.push(service)
			}
			return services
		}, [])
	}

	resolveServiceWithIntervention() {
		return Utils.reduce(InterventionHelper.getData(), function (services, intervention) {
			if (InterventionUtils.isActive(intervention) && services.indexOf(intervention.serviceId) === -1) {
				services.push(ServiceHelper.getData(intervention.serviceId))
			}
			return services
		}, [])
	}

	resolveServiceIdWithIntervention() {
		return Utils.reduce(InterventionHelper.getData(), function (services, intervention) {
			if (InterventionUtils.isActive(intervention) && services.indexOf(intervention.serviceId) === -1) {
				services.push(intervention.serviceId)
			}
			return services
		}, [])
	}

	resolveInterventions() {
		return Utils.reduce(CustomerHelper.getData(), function (customers, customer) {
			let state = this.customersState[customer.id] || {}
			if (state.hasIntervention)
				customers.push(customer)
			return customers
		}.bind(this), [])
	}

	resolveOffers() {
		return Utils.reduce(CustomerHelper.getData(), function (customers, customer) {
			let state = this.customersState[customer.id] || {}
			let hasOffer = state.hasOffer
			let hasIntervention = state.hasIntervention
			if (hasOffer && !hasIntervention)
				customers.push(customer)
			return customers
		}.bind(this), [])
	}

	__buildCustomersState() {
		let result = {}
		let interventions = Utils.map(InterventionHelper.getData())
		for (let i = 0; i < interventions.length; i++) {
			let intervention = interventions[i]
			if (intervention.auxiliaryId === this.auxiliary.id && InterventionUtils.isActive(intervention)) {
				result[intervention.customerId] = result[intervention.customerId] || {}
				result[intervention.customerId].hasIntervention = true
			}
		}
		let offers = Utils.map(OfferHelper.getData())
		for (let i = 0; i < offers.length; i++) {
			let offer = offers[i]
			result[offer.customerId] = result[offer.customerId] || {}
			if (!offer.hideToAux && offer.auxStatus !== 'DECLINED' && offer.sadStatus === 'PENDING') {
				result[offer.customerId] = result[offer.customerId] || {}
				let intervention = InterventionHelper.getData(offer.interventionId)
				let test1 = InterventionUtils.isCurrent(intervention)
				let test2 = !intervention.auxiliaryId
				if (InterventionUtils.isCurrent(intervention) && !intervention.auxiliaryId) {
					result[offer.customerId].hasOffer = true	
				}
				
			}
			
		}
		return result
	}

}
var AuxiliaryZoneObj = new AuxiliaryZoneData()
AuxiliaryZoneObj.ICONS = ICONS
AuxiliaryZoneObj.INFO_TYPE = INFO_TYPE
export default AuxiliaryZoneObj

